---
title: "Tabby Examples"
format: 
  html:
    toc: true
filters:
  - tabby  # Include the tabby filter
tabby:
  default-tab: "r"  # Set R as the default tab document-wide
---

# Introduction

This document demonstrates the Tabby extension for Quarto, which automatically creates tabsets for code blocks.

## Document Header

The document header specifies the default tab as Python:

```markdown
---
title: "Demonstrating Tabby Extension"
format: 
  html:
    toc: true
filters:
  - tabby  # Include the tabby filter
tabby:
  default-tab: "r"  # Set R as the default tab document-wide
---
```

## Basic Usage

Here's a simple example showing the same algorithm in different languages:

<details>
<summary>Source (Click to Expand)</summary>

````markdown
::: {.tabby}
```python
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

# Calculate first 5 Fibonacci numbers
for i in range(5):
    print(fibonacci(i))
```

```javascript
function fibonacci(n) {
    if (n <= 1) return n;
    return fibonacci(n-1) + fibonacci(n-2);
}

// Calculate first 5 Fibonacci numbers
for (let i = 0; i < 5; i++) {
    console.log(fibonacci(i));
}
```

```r
fibonacci <- function(n) {
    if (n <= 1) return(n)
    return(fibonacci(n-1) + fibonacci(n-2))
}

# Calculate first 5 Fibonacci numbers
for(i in seq_len(5)) {
    print(fibonacci(i))
}
```
:::
````
</details>

::: {.tabby}
```python
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

# Calculate first 5 Fibonacci numbers
for i in range(5):
    print(fibonacci(i))
```

```javascript
function fibonacci(n) {
    if (n <= 1) return n;
    return fibonacci(n-1) + fibonacci(n-2);
}

// Calculate first 5 Fibonacci numbers
for (let i = 0; i < 5; i++) {
    console.log(fibonacci(i));
}
```

```r
fibonacci <- function(n) {
    if (n <= 1) return(n)
    return(fibonacci(n-1) + fibonacci(n-2))
}

# Calculate first 5 Fibonacci numbers
for(i in seq_len(5)) {
    print(fibonacci(i))
}
```
:::

## Grouped Tabs

You can group related tabs together using the `group` attribute:

<details>
<summary>Source (Click to Expand)</summary>

````markdown
::: {.tabby group="data-loading"}
```python
import pandas as pd
data = pd.read_csv('data.csv')
```

```r
data <- read.csv('data.csv')
```
:::

::: {.tabby group="data-loading"}
```python
# Check the first few rows
print(data.head())
```

```r
# Check the first few rows
head(data)
```
:::
````
</details>

::: {.tabby group="data-loading"}
```python
import pandas as pd
data = pd.read_csv('data.csv')
```

```r
data <- read.csv('data.csv')
```
:::

::: {.tabby group="data-loading"}
```python
# Check the first few rows
print(data.head())
```

```r
# Check the first few rows
head(data)
```
:::

## Override Default Tab

You can override the document-wide default tab for specific code blocks. Here's an example with Javascript as the default tab:

<details>
<summary>Source (Click to Expand)</summary>

````markdown
::: {.tabby default-tab="javascript"}
```python
print("Hello from Python!")
```

```r
print("Hello from R!")
```

```javascript
console.log("Hello from JavaScript!");
```
:::
````
</details>


::: {.tabby default-tab="javascript"}
```python
print("Hello from Python!")
```

```r
print("Hello from R!")
```

```javascript
console.log("Hello from JavaScript!");
```
:::

# URL Parameters

You can also specify the default tab via URL parameter:
`?default-tab=Python` or `?default-tab=R`

Try it by clicking on the following link:

<https://quarto.thecoatlessprofessor.com/tabby/qtabby-example.html?default-tab=Python>